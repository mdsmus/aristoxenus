#!/usr/bin/env python

from __future__ import print_function

import os
import difflib
from difflib import SequenceMatcher
from optparse import OptionParser
from itertools import count

from aristoxenus import parse
from aristoxenus import emit
from aristoxenus import music


colors = {"black": "0;30",
          "blue": "0;34",
          "green": "0;32",
          "cyan": "0;36",
          "red": "0;31",
          "purple": "0;35",
          "brown": "0;33",
          "light_gray": "0;37",
          "dark_gray": "1;30",
          "dark_blue": "1;34",
          "dark_green": "1;32",
          "dark_cyan": "1;36",
          "dark_red": "1;31",
          "dark_purple": "1;35",
          "yellow": "1;33",
          "white": "1;37"}


def color_print(text, color, end='\n'):
    print("\x1b[{0}m{1}\x1b[{2}m".format(colors[color], text, colors["black"]),
          end=end)


def color_string(text, color):
    return "\x1b[{0}m{1}\x1b[{2}m".format(colors[color], text, colors["black"])


def compare_humdrum_file(filename):
    with open(filename) as f:
        orig = f.read()
        conv = emit.humdrum.show(parse.humdrum.parse_file(filename))
        s = SequenceMatcher(None, orig, conv)
        lines = zip(orig.splitlines(), conv.splitlines(), count())
        diff = [(o, g, n) for o, g, n in lines if o != g]
        return s.ratio(), diff, orig, conv


def print_final_stats(stats, opt):
    final_stats = "total: {0} | match: {1} | not match: {2}"
    if not opt.quiet:
        print("\n", "-" * 47, sep='')
    print(final_stats.format(sum(stats), stats[0], stats[1]), end='')
    err = stats[2]
    print(" |", color_string("errors:" + str(err), "red")) if err else print()
    if not opt.quiet:
        print()


def run_datatest(files, opt):
    # 100% match, less than 100% match, error in file
    stats = [0, 0, 0]

    if not opt.quiet:
        print()
    for fname in files:
        if not opt.quiet:
            color_print("{0:35}".format(fname), "blue", end='')
        try:
            ratio, diff, orig, conv = compare_humdrum_file(fname)
            str_ratio = "{0:2.2f}".format(ratio)

            if ratio >= 0.99:
                stats[0] += 1
                if not opt.quiet:
                    color_print(str_ratio, "green")
            else:
                stats[1] += 1
                if not opt.quiet:
                    color_print(str_ratio, "red")

                if opt.showdiff:
                    for a, b, n in diff:
                        print("{0} {1}\n{0} {2}\n".format(n, a, b))

                if opt.showhumdrum:
                    print("{0}\n\n{1}".format(orig, conv))

        except (IndexError, music.MusicError) as strerror:
            if not opt.quiet:
                color_print("[err]", "purple")
            if opt.showerror:
                print(strerror, '\n')
            stats[2] += 1

    print_final_stats(stats, opt)


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-d", "--show-diff", help="show diff",
                      action="store_true", dest="showdiff")
    parser.add_option("-e", "--show-error", help="show error",
                      action="store_true", dest="showerror")
    parser.add_option("-H", "--show-humdrum", help="show humdrum files",
                      action="store_true", dest="showhumdrum")
    parser.add_option("-q", "--quiet", help="only show final stats",
                      action="store_true", dest="quiet")
    (options, args) = parser.parse_args()
    run_datatest(args, options)
